<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Attendance - Face Recognition</title>
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 40px 20px;
            background: linear-gradient(135deg, #f6f9fc 0%, #e9ecef 100%);
            min-height: 100vh;
            box-sizing: border-box;
            color: #1a1f36;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            text-align: center;
        }

        .page-header {
            margin-bottom: 40px;
            position: relative;
        }

        h1 {
            color: #1a1f36;
            font-size: 2.5em;
            margin: 0 0 10px;
            font-weight: 700;
        }

        .subtitle {
            color: #64748b;
            font-size: 1.1em;
            margin: 0;
        }

        .camera-container {
            background: white;
            padding: 30px;
            border-radius: 24px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            margin-bottom: 30px;
            position: relative;
        }

        .video-wrapper {
            position: relative;
            margin: 20px auto;
            max-width: 720px;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }

        #video {
            width: 100%;
            display: block;
            background: #f1f5f9;
            border-radius: 20px;
            transform: scaleX(-1); /* Mirror the video */
        }

        .camera-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            border: 3px solid #3498db;
            border-radius: 20px;
            pointer-events: none;
        }

        .controls {
            display: flex;
            gap: 20px;
            justify-content: center;
            margin-top: 30px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 14px 30px;
            border: none;
            border-radius: 15px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            font-size: 1em;
            display: flex;
            align-items: center;
            gap: 10px;
            min-width: 180px;
            justify-content: center;
        }

        .start-btn {
            background: linear-gradient(135deg, #3498db, #2ecc71);
            color: white;
        }

        .stop-btn {
            background: #e74c3c;
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.15);
        }

        .btn:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .btn i {
            font-size: 1.2em;
        }

        .status {
            margin-top: 25px;
            padding: 15px 25px;
            border-radius: 15px;
            background: #f8fafc;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            font-weight: 500;
            border: 2px solid #e2e8f0;
        }

        .status.active {
            background: #dcfce7;
            color: #166534;
            border-color: #86efac;
        }

        .status.error {
            background: #fee2e2;
            color: #991b1b;
            border-color: #fecaca;
        }

        .back-btn {
            position: absolute;
            top: 20px;
            left: 20px;
            padding: 12px 24px;
            background: #f8fafc;
            color: #475569;
            border-radius: 12px;
            text-decoration: none;
            transition: all 0.3s ease;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            border: 2px solid #e2e8f0;
        }

        .back-btn:hover {
            background: #f1f5f9;
            transform: translateX(-5px);
            color: #1e293b;
        }

        .recognition-status {
            margin-top: 20px;
            font-size: 1.1em;
            font-weight: 500;
            color: #64748b;
        }

        .detection-result {
            margin-top: 20px;
            padding: 15px 25px;
            border-radius: 15px;
            background: #f8fafc;
            display: none;
            font-weight: 500;
            border: 2px solid #e2e8f0;
            transition: all 0.3s ease;
        }

        .detection-result.success {
            background: #dcfce7;
            color: #166534;
            border-color: #86efac;
        }

        .detection-result.error {
            background: #fee2e2;
            color: #991b1b;
            border-color: #fecaca;
        }

        .capture-btn {
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            color: white;
        }

        .capture-btn:disabled {
            background: #94a3b8;
        }

        @media (max-width: 768px) {
            .camera-container {
                padding: 20px;
                margin: 0 -10px;
                border-radius: 20px;
            }

            .video-wrapper {
                margin: 15px auto;
            }

            .controls {
                flex-direction: column;
                gap: 15px;
            }

            .btn {
                width: 100%;
            }

            .back-btn {
                position: static;
                margin-bottom: 20px;
                justify-content: center;
            }
        }

        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0; }
            100% { opacity: 1; }
        }

        .blink-text {
            animation: blink 2s infinite;
            color: red;
            font-size: 30px;
            margin-top: 0;
            text-align: center;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="page-header">
            <h1>Live Attendance</h1>
            <p class="subtitle">Face Recognition System</p>
        </div>
        <h1 class="blink-text">Coming soon ...</h1>
        <div class="camera-container">
            <a href="/api/v1/users" class="back-btn">
                <i class="fas fa-arrow-left"></i>
                Back to Users
            </a>
            
            <div class="video-wrapper">
                <video id="video" autoplay playsinline></video>
                <div class="camera-overlay"></div>
            </div>
            
            <canvas id="canvas" style="display: none;"></canvas>

            <div class="controls">
                <button id="startBtn" class="btn start-btn">
                    <i class="fas fa-video"></i>
                    Start Camera
                </button>
                <button id="captureBtn" class="btn capture-btn" disabled>
                    <i class="fas fa-camera"></i>
                    Capture & Detect
                </button>
                <button id="stopBtn" class="btn stop-btn" disabled>
                    <i class="fas fa-video-slash"></i>
                    Stop Camera
                </button>
            </div>
            
            <div id="status" class="status">
                <i class="fas fa-circle"></i>
                Camera is off
            </div>

            <div class="recognition-status">
                Waiting for face detection...
            </div>

            <div id="detectionResult" class="detection-result"></div>
        </div>
    </div>

    <script>
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const startBtn = document.getElementById('startBtn');
        const stopBtn = document.getElementById('stopBtn');
        const captureBtn = document.getElementById('captureBtn');
        const status = document.getElementById('status');
        const detectionResult = document.getElementById('detectionResult');
        let stream = null;
        let isProcessing = false;

        startBtn.addEventListener('click', async () => {
            try {
                stream = await navigator.mediaDevices.getUserMedia({ 
                    video: {
                        width: { ideal: 1280 },
                        height: { ideal: 720 },
                        facingMode: "user"
                    }
                });
                video.srcObject = stream;
                startBtn.disabled = true;
                stopBtn.disabled = false;
                captureBtn.disabled = false;
                status.innerHTML = '<i class="fas fa-circle"></i> Camera is active';
                status.className = 'status active';
            } catch (err) {
                console.error('Error accessing camera:', err);
                status.innerHTML = '<i class="fas fa-exclamation-circle"></i> Error accessing camera';
                status.className = 'status error';
            }
        });

        stopBtn.addEventListener('click', () => {
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
                video.srcObject = null;
                startBtn.disabled = false;
                stopBtn.disabled = true;
                captureBtn.disabled = true;
                status.innerHTML = '<i class="fas fa-circle"></i> Camera is off';
                status.className = 'status';
                detectionResult.style.display = 'none';
            }
        });

        captureBtn.addEventListener('click', async () => {
            if (isProcessing) return;
            
            try {
                isProcessing = true;
                captureBtn.disabled = true;
                
                // Set canvas dimensions to match video
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                
                // Draw the current video frame on the canvas
                const context = canvas.getContext('2d');
                context.drawImage(video, 0, 0, canvas.width, canvas.height);
                
                // Convert the canvas to a blob
                const blob = await new Promise(resolve => {
                    canvas.toBlob(resolve, 'image/jpeg', 0.9);
                });

                // Create form data
                const formData = new FormData();
                formData.append('image', blob, 'capture.jpg');

                // Show processing status
                detectionResult.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
                detectionResult.className = 'detection-result';
                detectionResult.style.display = 'block';

                // Send to your API endpoint
                const response = await fetch('/api/v1/detect-face', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();

                if (data.success) {
                    detectionResult.innerHTML = `<i class="fas fa-check-circle"></i> ${data.message}`;
                    detectionResult.className = 'detection-result success';
                } else {
                    detectionResult.innerHTML = `<i class="fas fa-times-circle"></i> ${data.message}`;
                    detectionResult.className = 'detection-result error';
                }

            } catch (error) {
                console.error('Error:', error);
                detectionResult.innerHTML = '<i class="fas fa-exclamation-circle"></i> Error processing image';
                detectionResult.className = 'detection-result error';
            } finally {
                isProcessing = false;
                captureBtn.disabled = false;
            }
        });

        // Clean up when leaving the page
        window.addEventListener('beforeunload', () => {
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
            }
        });
    </script>
</body>
</html> 
